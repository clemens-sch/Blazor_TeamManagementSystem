@page "/teams"
@using TeamManagement.Shared;
@using System.Linq
@using System
@inject MudBlazor.ISnackbar snackBar


 @*Add-Team - Inputfield with Button + Snackbar*@
<MudCard Elevation="25">
	<MudCardHeader>
		<CardHeaderContent>
			<MudText Typo="Typo.h6">Teams</MudText>
		</CardHeaderContent>
	</MudCardHeader>
	<MudCardContent>
		<EditForm OnValidSubmit="Add" Model="@team">
			<MudTextField @bind-Value="team.TeamName" Label="Teamname"></MudTextField>
			<br/>
			<MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="Add"> Add Team</MudButton>
		</EditForm>
	</MudCardContent>
</MudCard>
<br />

<MudTable Items="GetAll()" Hover="true" Filter="new Func<Team, bool>(Search)" @bind-team="team">
	<ToolBarContent>
		<MudText Typo="Typo.h6">Players</MudText>
		<MudSpacer/>
		<MudTextField @bind-Value="searchString" Placeholder="Search for Teams"></MudTextField>
	</ToolBarContent>
	<HeaderContent>
		<MudTh>Team Name</MudTh>
		<MudTh>Actions</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Team Name">@context.TeamName</MudTd>
		<MudTd DataLabel="Actions">
			<MudFab OnClick="@(() => Update(context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"></MudFab>
			<MudFab OnClick="@(() => Delete(context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"></MudFab>
		</MudTd>
	</RowTemplate>
</MudTable>


@code {
	// search
	private string searchString = "";
	private Team team = new Team();
	private List<Team> teams = new List<Team>();

	// When page loads, this function is called
	// - after the page has loaded - every team is displayed
	protected override async Task OnInitializedAsync()
	{
		teams = teamservice.GetAll();
	}

	private bool Search(Team team)
	{
		if (string.IsNullOrWhiteSpace(searchString)) return true;
		if (team.TeamName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
		return false;
	}

	private List<Team> GetAll()
	{
		teams = teamservice.GetAll();
		return teams;
	}

	private void Add()
	{
		if(team.TeamId == 0 && team.TeamName != null)
		{
			teamservice.Add(team);
			snackBar.Add($"Team {team.TeamName} Added", Severity.Success);
		}
		else if(team.TeamName == null) { snackBar.Add("Empty Input", Severity.Error); }
		else
		{
			teamservice.Update(team);
			snackBar.Add($"Team {team.TeamName} Updated", Severity.Success);
		}
		team = new Team();
		GetAll();
	}

	private void Update(Team record)
	{
		team = record;
		StateHasChanged();
	}
	private void Delete(Team record)
	{
		teamservice.Delete(record);
		GetAll();
		snackBar.Add($"Team {team.TeamName} Deleted", Severity.Success);
	}
}
